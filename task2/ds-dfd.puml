@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Data Flow Diagram - Будущее 2.0 (Объединенная архитектура Data Mesh)

' === Роли ===
Person(bi_user, "Бизнес-аналитик", "Строит отчёты и дашборды")
Person(devops, "DevOps", "Настраивает инфраструктуру")

' === Домены ===
System_Boundary(domains, "Бизнес-домены (DDD)") {
    Container(patients, "Patients API", "REST/gRPC", "Демография, PII-данные", $tags="core")
    Container(medical, "Medical API", "gRPC", "Медкарты, анализы", $tags="core")
    Container(fintech, "Fintech API", "GraphQL", "Платежи, кредиты", $tags="core")
    Container(logistics, "Logistics API", "REST", "Поставки, инвентарь", $tags="supporting")
}

' === Платформа ===
System_Boundary(platform, "Data Mesh Platform") {
    Container(kafka, "Kafka", "Apache Kafka", "Шина событий (Avro/JSON)")
    Container(airflow, "Airflow", "Apache Airflow", "Оркестрация ETL/ELT")
    Container(iceberg, "Iceberg", "Apache Iceberg", "Версионные таблицы\n(S3 + Nessie)")
    Container(trino, "Trino", "Trino", "Федеративные SQL-запросы")
    Container(datahub, "DataHub", "DataHub", "Каталог метаданных\nи Lineage")
    Container(superset, "Superset", "Apache Superset", "BI-портал")
    Container(api_gw, "API Gateway", "Kong", "Единый entry-point")
    Container(keycloak, "Keycloak", "Keycloak", "RBAC и аутентификация")
}

' === Потоки данных ===
' Публикация событий
Rel(patients, kafka, "События пациентов (без PII)", "Avro")
Rel(medical, kafka, "Мед.агрегаты", "Avro")
Rel(fintech, kafka, "Финансовые транзакции", "Avro")
Rel(logistics, kafka, "Данные поставок", "JSON")

' Обработка данных
Rel(kafka, airflow, "Триггер обработки", "Consumer")
Rel(airflow, iceberg, "Трансформированные данные", "Parquet")
Rel(airflow, datahub, "Регистрация метаданных", "REST API")

' Аналитика
Rel(iceberg, trino, "SQL-доступ", "Nessie Catalog")
Rel(trino, superset, "Визуализация", "JDBC")
Rel(datahub, trino, "Схемы и политики", "REST API")

' Управление доступом
Rel(api_gw, keycloak, "Проверка токенов", "OIDC")
Rel(patients, keycloak, "Аутентификация", "JWT")
Rel(medical, keycloak, "Аутентификация", "JWT")
Rel(fintech, keycloak, "Аутентификация", "JWT")

' API-доступ
Rel(api_gw, patients, "Запросы профилей", "HTTPS")
Rel(api_gw, medical, "Доступ к записям", "HTTPS")
Rel(api_gw, fintech, "Финансовые сервисы", "HTTPS")

' Взаимодействие пользователей
Rel(bi_user, superset, "Создание дашбордов")
Rel(devops, airflow, "Настройка пайплайнов")

' Легенда
legend right
  | **Компонент**          | **Роль**                          |
  | Kafka                  | Центральная шина событий          |
  | Iceberg + Nessie       | Версионное хранилище данных        |
  | Trino                  | SQL-аналитика поверх всех данных   |
  | DataHub                | Управление метаданными и lineage   |
  | Keycloak               | Единая аутентификация и RBAC       |
  | API Gateway            | Контроль доступа к доменным API    |
endlegend

@enduml

@startuml
!define C4P https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master
!include C4P/C4_Container.puml
LAYOUT_WITH_LEGEND()

title «Будущее 2.0» — единая DFD: домены + Data Mesh Platform

'=== Бизнес-домены (bounded contexts) ===
System_Boundary(domains, "DDD Domains") {
  Container(patients, "Patients API", "REST", "Демография, PII-данные", $tags="core")
  Container(medical, "Medical API", "gRPC", "Медкарты, анализы, врачи", $tags="core")
  Container(fintech, "Fintech API", "GraphQL", "Счета, кредиты, платежи", $tags="core")
  Container(logistics, "Logistics API", "REST", "Поставки, инвентарь, фарма", $tags="core")
}

'=== Платформа Data Mesh ===
System_Boundary(platform, "Data Mesh Platform") {
  Container(kafka, "Kafka Cluster", "Apache Kafka", "Event Hub для всех доменов")
  Container(airflow, "Airflow", "Apache Airflow", "Оркестрация ETL/ELT (dbt)")
  Container(iceberg, "Iceberg Lakehouse", "Apache Iceberg\n(on S3)", "ACID-таблицы + Nessie Versioning")
  Container(datahub, "DataHub", "DataHub", "Метаданные, lineage, RBAC")
  Container(trino, "Trino", "Trino", "Federated SQL (Iceberg + Kafka)")
  Container(superset, "Superset", "Apache Superset", "BI-портал и отчёты")
}

'=== Инфраструктура ===
System_Boundary(infra, "Infrastructure") {
  Container(apiGw, "API Gateway", "Kong", "Единая точка входа")
  Container(auth, "Keycloak", "Keycloak", "OAuth2 / RBAC / SSO")
}

'=== Потоки событий (Event-driven) ===
Rel(patients, kafka,     "PatientEvents (аноним.)", "Avro/JSON")
Rel(medical, kafka,      "MedicalAggregates (без PII)", "Avro")
Rel(fintech, kafka,      "FinanceTransactions", "Avro")
Rel(logistics, kafka,    "LogisticsEvents", "JSON")

'=== ETL/ELT и версионирование ===
Rel(kafka, airflow,      "Trigger pipelines", "Kafka Consumer")
Rel(airflow, iceberg,    "Write transformed tables", "Parquet")
Rel(iceberg, datahub,    "Register tables & lineage", "Metadata API")
Rel(iceberg, nessie,     "Version control", "Nessie commits")

'=== Метаданные и SQL-подключения ===
Rel(datahub, trino,      "Provide schemas & policies", "REST API")
Rel(trino, iceberg,      "Read tables", "Iceberg catalog")
Rel(trino, kafka,        "Read real-time streams", "Kafka connector")

'=== BI и аналитика ===
Rel(superset, trino,     "Execute queries", "JDBC")
Rel(biUser, superset,    "Build dashboards", "Browser")

'=== Синхронные API между доменами ===
Rel(apiGw, patients,     "REST/gRPC Calls", "HTTPS (JWT)")
Rel(apiGw, medical,      "REST/gRPC Calls", "HTTPS (JWT)")
Rel(apiGw, fintech,      "REST/gRPC Calls", "HTTPS (JWT)")
Rel(apiGw, logistics,    "REST/gRPC Calls", "HTTPS (JWT)")
Rel(medical, logistics,  "Request drugs", "gRPC")
Rel(logistics, fintech,  "Pay for supplies", "REST")

'=== Безопасность ===
Rel(apiGw, auth,         "Validate tokens", "OpenID Connect")
Rel(patients, auth,      "AuthN/Z", "JWT")
Rel(medical, auth,       "AuthN/Z", "JWT")
Rel(fintech, auth,       "AuthN/Z", "JWT")
Rel(logistics, auth,     "AuthN/Z", "JWT")

legend right
  |=Component     |=Role|
  |Kafka          |Event hub (event-driven)|
  |Airflow        |Orchestration (ETL/ELT)|
  |Iceberg+Nessie |Lakehouse storage + versioning|
  |DataHub        |Metadata catalog & governance|
  |Trino          |Federated SQL query engine|
  |Superset       |BI Portal for self-service|
  |Kong+Keycloak  |API Gateway + AuthN/Z|
endlegend

@enduml


@startuml
!define C4P https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master
!include C4P/C4_Container.puml
LAYOUT_WITH_LEGEND()

title Data Mesh DFD — Будущее 2.0, домены и платформа

Person(biUser, "Бизнес-аналитик", "Строит отчёты и дашборды")
Person(devOps, "DevOps-инженер", "Настраивает и поддерживает платформу")

System_Boundary(domains, "Бизнес-домены (DDD)") {
  Container(patients, "Patients", "DDD Core", "Демография, контакты (PII)")
  Container(medical, "Medical", "DDD Core", "Медкарты, врачи, назначения")
  Container(fintech, "Fintech", "DDD Core", "Счета, кредиты, платежи")
  Container(logistics, "Logistics", "DDD Core", "Поставки, инвентарь, фарма")
}

System_Boundary(platform, "Data Mesh Platform") {
  Container(kafka, "Kafka\nEvent Hub", "Apache Kafka", "Потоковая шина событий")
  Container(airflow, "Airflow\nOrchestrator", "Apache Airflow", "Оркестрация ETL/ELT пайплайнов")
  Container(iceberg, "Iceberg\nData Lakehouse", "Apache Iceberg\n(on S3)", "ACID-таблицы аналитики")
  Container(nessie, "Nessie\nVersion Control", "Project Nessie", "Git-подобное ветвление Iceberg")
  Container(datahub, "DataHub\nMetadata Catalog", "DataHub", "Метаданные, lineage, RBAC")
  Container(trino, "Trino\nQuery Engine", "Trino", "Federated SQL к Iceberg/Kafka")
  Container(superset, "Superset\nBI Portal", "Apache Superset", "Панели и отчёты")
  Container(apiGw, "API Gateway", "Kong + Keycloak", "API-контроль и аутентификация")
}

' Потоки из доменов в платформу
Rel(patients, kafka, "Publish PatientEvents", "Avro/JSON")
Rel(medical, kafka, "Publish MedicalAggregates", "Avro")
Rel(fintech, kafka, "Publish FinanceMetrics", "Avro")
Rel(logistics, kafka, "Publish LogisticsEvents", "JSON")

Rel(kafka, airflow, "Trigger ETL jobs", "Consumer")
Rel(airflow, iceberg, "Write transformed tables", "Parquet")
Rel(iceberg, nessie, "Versioned tables", "Metadata commits")
Rel(airflow, datahub, "Register pipelines & schemas", "Metadata API")

' Метаданные и каталог
Rel(datahub, trino, "Provide schemas & policies", "REST API")

' Запросы BI & доменов
Rel(biUser, superset, "Build dashboards")
Rel(superset, trino, "SQL queries", "JDBC")
Rel(devOps, apiGw, "Configure routes & policies")

' API-доступ к доменам
Rel(apiGw, patients, "REST/gRPC calls\n(patient profile)")
Rel(apiGw, medical, "REST/gRPC calls\n(medical records)")
Rel(apiGw, fintech, "REST/gRPC calls\n(financial services)")
Rel(apiGw, logistics, "REST/gRPC calls\n(logistics services)")

' Аналитический SQL-слой
Rel(trino, iceberg, "Read analytical tables", "Iceberg tables")
Rel(trino, kafka, "Read real-time streams", "Kafka topics")

@enduml

